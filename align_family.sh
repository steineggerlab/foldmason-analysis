#!/bin/bash -e

# ./align_family.sh folder/ <optional: tool1 tool2 ...>
#
# Run tool suite on a given cluster folder.
# Assumes all tools on $PATH and directory structure:
#
# folder/
# 	pdbs/
# 		structureA.pdb
# 		structureB.pdb
#	folder_aa.fa
#	folder_msa.fa
#
# As generated by clean_homstrad.py

THREADS="${THREADS:=1}"
FAMILY=$(basename "$1")
PDB="${1}/pdbs/"
AA="${1}/${FAMILY}_aa.fasta"

FMT="Command being timed: %C\nUser time (seconds): %U\nSystem time (seconds): %S\nPercent of CPU this job got: %P\nWall clock time (seconds): %e\nAverage shared text size (kbytes): %X\nAverage unshared data size (kbytes): %%D\nAverage stack size (kbytes): %p\nAverage total size (kbytes): %K\nMaximum resident set size (kbytes): %M\nAverage %resident set size (kbytes): %t\nMajor (requiring I/O) page faults: %F\nMinor (reclaiming a frame) page faults: %%R\nVoluntary context switches: %w\nInvoluntary context switches: %c\nSwaps: %W\nFile system inputs: %I\nFile system %outputs: %O\nSocket messages sent: %s\nSocket messages received: %r\nSignals delivered: %k\nPage size (bytes): %Z\nExit %status: %x"

# Executable paths
declare -A paths=(
	[foldmason]=$(command -v "foldmason")
	[caretta]=$(command -v "caretta-cli")
	[matt]=$(command -v "Matt")
	[mtm]=$(command -v "mTM-align")
	[mustang]=$(command -v "mustang-3.2.4")
	[clustalo]=$(command -v "clustalo")
	[famsa]=$(command -v "famsa")
	[mafft]=$(command -v "linsi")
	[muscle]=$(command -v "muscle5")
)

# Enable/disable status of each tool
declare -A tools=(
	[foldmason]=false
	[caretta]=false
	[matt]=false
	[mtm]=false
	[mustang]=false
	[clustalo]=false
	[famsa]=false
	[mafft]=false
	[muscle]=false
	[none]=false
)

# no args: help
# 1 arg: input folder
# >1 arg: input folder, specific tools to run
# throw errors on no args, invalid tool, valid tool but path not found
if [[ $# -eq 0 ]]; then
	echo "./align_family.sh folder/ <optional: tool1 tool2 ...>"
	exit 1
elif [[ $# -eq 1 ]]; then
	for tool in "${!tools[@]}"; do
		if [[ -n paths["$tool"] ]]; then
			tools["$tool"]=true
		else
			echo "${tool} not found on $PATH"
			exit 1
		fi
	done
elif [[ $# -eq 2 && $2 -eq "none" ]]; then
	: # no op
elif [[ $# -gt 1 ]]; then
	for tool in "${@:2}"; do
		if [[ ! -v tools["$tool"] ]]; then
			echo "Invalid tool: ${tool}. Choose from [${!tools[@]}]"
			exit 1
		fi
		if [[ -n "${paths[$tool]}" ]]; then
			tools["$tool"]=true
		else
			echo "${tool} not found on \$PATH"
			exit 1
		fi
	done
fi

if [[ "${tools[none]}" == false ]]; then
	echo "Running tools:"
	for tool in "${!tools[@]}"; do
		if [[ "${tools[$tool]}" == true ]]; then
			echo "  ${tool}: ${paths[$tool]}"
		fi
	done
fi

# Structure aligners
if [[ "${tools[caretta]}" == true && ! -e "${1}/caretta_results" ]]; then
	/usr/bin/time -o "${1}/caretta.time" -f "${FMT}" "${paths[caretta]}" "$PDB" -t "$THREADS" -o "${1}/caretta_results"
fi
if [[ "${tools[foldmason]}" == true ]]; then
	/usr/bin/time -o "${1}/foldmason.time" -f "${FMT}" "${paths[foldmason]}" easy-msa \
		"$PDB" "${1}/foldmason" "${1}/foldmason_tmp" --threads $THREADS 
	/usr/bin/time -o "${1}/foldmason_refine1000.time" -f "${FMT}" "${paths[foldmason]}" easy-msa \
		"$PDB" "${1}/foldmason_refine1000" "${1}/foldmason_refine1000_tmp" \
	       	--refine-iters 1000 --refine-seed 48335597 --threads $THREADS --pair-threshold 0
	/usr/bin/time -o "${1}/foldmason_refine1000_core.time" -f "${FMT}" "${paths[foldmason]}" easy-msa \
		"$PDB" "${1}/foldmason_refine1000_core" "${1}/foldmason_refine1000_core_tmp" \
	       	--refine-iters 1000 --refine-seed 48335597 --threads $THREADS --pair-threshold 1
fi
if [[ "${tools[matt]}" == true && ! -e "${1}/matt" ]]; then
	/usr/bin/time -o "${1}/matt.time" -f "${FMT}" "${paths[matt]}" -o "${1}/matt" $(find "$PDB" -type f) -t "$THREADS"
fi
if [[ "${tools[mtm]}" == true && ! -e "${1}/mTM_result" ]]; then
	/usr/bin/time -o "${1}/mtmalign.time" -f "${FMT}" "${paths[mtm]}" -i <(find "$PDB" -type f) -outdir "${1}/mTM_result"
fi
if [[ "${tools[mustang]}" == true && ! -e "${1}/mustang" ]]; then
	/usr/bin/time -o "${1}/mustang.time" -f "${FMT}" "${paths[mustang]}" -i $(find "$PDB" -type f) -F fasta -o "$RESULT"
fi

# Sequence aligners
if [[ "${tools[clustalo]}" == true && ! -e "${1}/clustalo.fa" ]]; then
	/usr/bin/time -o "${1}/clustalo.time" -f "${FMT}" "${paths[clustalo]}" -i "$AA" -o "${1}/clustalo.fa" --threads "$THREADS" --infmt fasta
fi
if [[ "${tools[famsa]}" == true && ! -e "${1}/famsa.fa" ]]; then
	/usr/bin/time -o "${1}/famsa.time" -f "${FMT}" "${paths[famsa]}" "$AA" "${1}/famsa.fa" -t "$THREADS"
fi
if [[ "${tools[mafft]}" == true && ! -e "${1}/mafft.fa" ]]; then
	/usr/bin/time -o "${1}/mafft.time" -f "${FMT}" "${paths[mafft]}" --thread "$THREADS" "$AA" > "${1}/mafft.fa"
fi
if [[ "${tools[muscle]}" == true && ! -e "${1}/muscle.fa" ]]; then
	/usr/bin/time -o "${1}/muscle.time" -f "${FMT}" "${paths[muscle]}" -align "${AA}" -output "${1}/muscle.fa" -threads "$THREADS"
fi

# Generate LDDT reports
DB="${1}/foldmason_tmp/latest/structures"

compute_lddt () {
	if [[ "${tools[$1]}" == false ]]; then return; fi
	"${paths[foldmason]}" msa2lddtreport "$DB" "$2" "$3"
	"${paths[foldmason]}" msa2lddtreport "$DB" "$2" "${3/.html/_ungap.html}" --pair-threshold 1
}

if [[ -e $DB ]]; then
	echo "Computing LDDT scores"
	if [[ -e "${1}/${FAMILY}_msa.fasta" ]]; then
		"${paths[foldmason]}" msa2lddtreport "$DB" "${1}/${FAMILY}_msa.fasta" "${1}/homstrad.html"
	fi
	compute_lddt "foldmason" "${1}/foldmason_aa.fa"              "${1}/foldmason.html"
	compute_lddt "foldmason" "${1}/foldmason_refine1000_aa.fa"   "${1}/foldmason_refine1000.html"
	compute_lddt "foldmason" "${1}/foldmason_refine1000_core_aa.fa"   "${1}/foldmason_refine1000_core.html"
	compute_lddt "muscle"    "${1}/muscle.fa"                    "${1}/muscle.html"
	compute_lddt "caretta"   "${1}/caretta_results/result.fasta" "${1}/caretta.html"
	compute_lddt "matt"      "${1}/matt.fasta"                   "${1}/matt.html"
	compute_lddt "mtm"       "${1}/mTM_result/result.fasta"      "${1}/mtmalign.html"
	compute_lddt "mustang"   "${1}/mustang.afasta"       	     "${1}/mustang.html"
	compute_lddt "clustalo"  "${1}/clustalo.fa"                  "${1}/clustalo.html"
	compute_lddt "famsa"     "${1}/famsa.fa"                     "${1}/famsa.html"
	compute_lddt "mafft"     "${1}/mafft.fa"                     "${1}/mafft.html"
fi
